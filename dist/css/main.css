/*To whoever is reading, writing comments helps me understand what I am doing. Some of them will seem stupid but writing things down just makes sense in my head*/
/*background is now whatever color was assigned to the variable $primary-color, why not just use css or bootstrap?*/
/*$creating variables*/
/* Bacically variables for effects and style rules. Avoids always adding things like float-left all the time.
    Can be used at anytime using @include.  */
.menu-btn {
  position: absolute;
  z-index: 3;
  right: 35px;
  top: 35px;
  cursor: pointer;
  transition: all 0.5s ease-out; }
  .menu-btn .btn-line {
    width: 28px;
    height: 3px;
    margin: 0 0 5px 0;
    /*top, right, bottom, left same as in padding. */
    background: #fff;
    transition: all 0.5s ease-out; }
  .menu-btn.close {
    transform: rotate(180deg); }
    .menu-btn.close .btn-line:nth-child(1) {
      transform: rotate(45deg) translate(5px, 5px); }
    .menu-btn.close .btn-line:nth-child(2) {
      opacity: 0; }
    .menu-btn.close .btn-line:nth-child(3) {
      transform: rotate(-45deg) translate(7px, -6px); }

.menu {
  position: fixed;
  top: 0;
  width: 100%;
  opacity: 0.9;
  visibility: hidden; }
  .menu.show {
    visibility: visible; }
  .menu-branding, .menu-nav {
    display: flex;
    flex-flow: column wrap;
    align-items: center;
    justify-content: center;
    float: left;
    width: 50%;
    height: 100vh;
    overflow: hidden; }
  .menu-nav {
    margin: 0;
    padding: 0;
    background: #373737;
    list-style: none;
    transform: translate3d(0, -100%, 0);
    transition: all 0.5s ease-out; }
    .menu-nav.show {
      transform: translate3d(0, 0, 0); }
  .menu-branding {
    background: #444;
    transform: translate3d(0, 100%, 0);
    transition: all 0.5s ease-out; }
    .menu-branding.show {
      transform: translate3d(0, 0, 0); }
    .menu-branding .portrait {
      width: 250px;
      height: 250px;
      background: url("../img/portrait.jpg");
      border-radius: 50%;
      border: solid 3px #eece1a; }
  .menu .nav-item {
    transform: translate3d(600px, 0, 0);
    transition: all 0.5s ease-out; }
    .menu .nav-item.show {
      transform: translate3d(0, 0, 0); }
    .menu .nav-item.current > a {
      /* > meaning inside the current class we wanna color only the link. */
      color: #eece1a; }
  .menu .nav-link {
    display: inline-block;
    position: relative;
    font-size: 30px;
    text-transform: uppercase;
    padding: 1rem 0;
    font-weight: 300;
    color: #fff;
    text-decoration: none;
    transition: all 0.5s ease-out; }
    .menu .nav-link:hover {
      color: #eece1a; }

/* for(let x = 0; i < 4;i++)*/
.nav-item:nth-child(1) {
  transition-delay: 0.1s; }

.nav-item:nth-child(2) {
  transition-delay: 0.2s; }

.nav-item:nth-child(3) {
  transition-delay: 0.3s; }

.nav-item:nth-child(4) {
  transition-delay: 0.4s; }

/*ctrl c to stop npm run sass to restart*/
@media screen and (max-width: 768px) {
  main {
    align-items: center;
    text-align: center; }
    main .lg-heading {
      line-height: 1;
      margin-bottom: 1rem; }
  ul.menu-nav, div.menu-branding {
    float: none;
    width: 100%;
    min-height: 0; }
    ul.menu-nav.show, div.menu-branding.show {
      transform: translate3d(0, 0, 0); }
  .menu-nav {
    height: 75vh;
    transform: translate3d(-100%, 0, 0);
    font-size: 24px; }
  .menu-branding {
    height: 25vh;
    transform: translate3d(100%, 0, 0); }
    .menu-branding .portrait {
      background: url(../img/portrait_small.jpg);
      width: 150px;
      height: 150px; } }

@media screen and (max-width: 500px) {
  main#home h1 {
    margin-top: 10vh; } }

* {
  box-sizing: border-box; }

body {
  background: #444;
  /*color: set-text-color($primary-color);*/
  height: 100%;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.5; }
  body#bg-img {
    background: url(../img/background.jpg);
    background-attachment: fixed;
    background-size: cover;
    /*.overlay*/ }
    body#bg-img:after {
      /*pseudo-element(return to documentation)*/
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      background: rgba(68, 68, 68, 0.9); }

/*nesting & same as h1.lg-heading*/
/*multiplier of the html tag font size. <html> default size is 16px */
h1,
h2,
h3 {
  margin: 0;
  font-weight: 400;
  color: #fff; }
  h1.lg-heading,
  h2.lg-heading,
  h3.lg-heading {
    font-size: 6rem; }
  h1.sm-heading,
  h2.sm-heading,
  h3.sm-heading {
    margin-bottom: 2rem;
    padding: 0.2rem 1rem;
    background: rgba(73, 73, 73, 0.5); }

a {
  color: #fff;
  text-decoration: none; }

header {
  position: fixed;
  /*Everything pushed under it*/
  z-index: 2;
  /* All elements are aware of the space taken by others. The z-index attribute lets you adjust the order of the layering of objects when rendering content.*/
  width: 100%; }

.text-secondary {
  color: #eece1a; }

main {
  /* All around padding*/
  padding: 4rem;
  height: 100%; }
  main .icons {
    margin-top: 1rem; }
    main .icons a {
      padding: 0.4rem; }
      main .icons a:hover {
        color: #eece1a;
        transition: all 0.5s ease-out;
        /*Adding a mixin using @include*/ }
  main#home {
    overflow: hidden;
    /*Scroll bar always hidden*/ }
    main#home h1 {
      margin-top: 20vh;
      /* vh is a unit to specify hight, like slices going sideways or vw slices going up and down.*/ }
